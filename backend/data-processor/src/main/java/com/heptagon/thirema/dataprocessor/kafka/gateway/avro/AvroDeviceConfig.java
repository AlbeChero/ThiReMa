/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.heptagon.thirema.dataprocessor.kafka.gateway.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AvroDeviceConfig extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3859043115225057434L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroDeviceConfig\",\"namespace\":\"com.heptagon.thirema.dataprocessor.kafka.gateway.avro\",\"fields\":[{\"name\":\"ipAddress\",\"type\":\"string\"},{\"name\":\"frequency\",\"type\":\"int\"},{\"name\":\"enabled\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroDeviceConfig> ENCODER =
      new BinaryMessageEncoder<AvroDeviceConfig>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroDeviceConfig> DECODER =
      new BinaryMessageDecoder<AvroDeviceConfig>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroDeviceConfig> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroDeviceConfig> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroDeviceConfig> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroDeviceConfig>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroDeviceConfig to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroDeviceConfig from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroDeviceConfig instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroDeviceConfig fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence ipAddress;
  @Deprecated public int frequency;
  @Deprecated public boolean enabled;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroDeviceConfig() {}

  /**
   * All-args constructor.
   * @param ipAddress The new value for ipAddress
   * @param frequency The new value for frequency
   * @param enabled The new value for enabled
   */
  public AvroDeviceConfig(CharSequence ipAddress, Integer frequency, Boolean enabled) {
    this.ipAddress = ipAddress;
    this.frequency = frequency;
    this.enabled = enabled;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return ipAddress;
    case 1: return frequency;
    case 2: return enabled;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: ipAddress = (CharSequence)value$; break;
    case 1: frequency = (Integer)value$; break;
    case 2: enabled = (Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ipAddress' field.
   * @return The value of the 'ipAddress' field.
   */
  public CharSequence getIpAddress() {
    return ipAddress;
  }


  /**
   * Sets the value of the 'ipAddress' field.
   * @param value the value to set.
   */
  public void setIpAddress(CharSequence value) {
    this.ipAddress = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * @return The value of the 'frequency' field.
   */
  public int getFrequency() {
    return frequency;
  }


  /**
   * Sets the value of the 'frequency' field.
   * @param value the value to set.
   */
  public void setFrequency(int value) {
    this.frequency = value;
  }

  /**
   * Gets the value of the 'enabled' field.
   * @return The value of the 'enabled' field.
   */
  public boolean getEnabled() {
    return enabled;
  }


  /**
   * Sets the value of the 'enabled' field.
   * @param value the value to set.
   */
  public void setEnabled(boolean value) {
    this.enabled = value;
  }

  /**
   * Creates a new AvroDeviceConfig RecordBuilder.
   * @return A new AvroDeviceConfig RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new AvroDeviceConfig RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroDeviceConfig RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new AvroDeviceConfig RecordBuilder by copying an existing AvroDeviceConfig instance.
   * @param other The existing instance to copy.
   * @return A new AvroDeviceConfig RecordBuilder
   */
  public static Builder newBuilder(AvroDeviceConfig other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroDeviceConfig instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroDeviceConfig>
    implements org.apache.avro.data.RecordBuilder<AvroDeviceConfig> {

    private CharSequence ipAddress;
    private int frequency;
    private boolean enabled;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ipAddress)) {
        this.ipAddress = data().deepCopy(fields()[0].schema(), other.ipAddress);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.enabled)) {
        this.enabled = data().deepCopy(fields()[2].schema(), other.enabled);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroDeviceConfig instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroDeviceConfig other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.ipAddress)) {
        this.ipAddress = data().deepCopy(fields()[0].schema(), other.ipAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.enabled)) {
        this.enabled = data().deepCopy(fields()[2].schema(), other.enabled);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'ipAddress' field.
      * @return The value.
      */
    public CharSequence getIpAddress() {
      return ipAddress;
    }


    /**
      * Sets the value of the 'ipAddress' field.
      * @param value The value of 'ipAddress'.
      * @return This builder.
      */
    public Builder setIpAddress(CharSequence value) {
      validate(fields()[0], value);
      this.ipAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ipAddress' field has been set.
      * @return True if the 'ipAddress' field has been set, false otherwise.
      */
    public boolean hasIpAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ipAddress' field.
      * @return This builder.
      */
    public Builder clearIpAddress() {
      ipAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'frequency' field.
      * @return The value.
      */
    public int getFrequency() {
      return frequency;
    }


    /**
      * Sets the value of the 'frequency' field.
      * @param value The value of 'frequency'.
      * @return This builder.
      */
    public Builder setFrequency(int value) {
      validate(fields()[1], value);
      this.frequency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'frequency' field has been set.
      * @return True if the 'frequency' field has been set, false otherwise.
      */
    public boolean hasFrequency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'frequency' field.
      * @return This builder.
      */
    public Builder clearFrequency() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'enabled' field.
      * @return The value.
      */
    public boolean getEnabled() {
      return enabled;
    }


    /**
      * Sets the value of the 'enabled' field.
      * @param value The value of 'enabled'.
      * @return This builder.
      */
    public Builder setEnabled(boolean value) {
      validate(fields()[2], value);
      this.enabled = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'enabled' field has been set.
      * @return True if the 'enabled' field has been set, false otherwise.
      */
    public boolean hasEnabled() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'enabled' field.
      * @return This builder.
      */
    public Builder clearEnabled() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroDeviceConfig build() {
      try {
        AvroDeviceConfig record = new AvroDeviceConfig();
        record.ipAddress = fieldSetFlags()[0] ? this.ipAddress : (CharSequence) defaultValue(fields()[0]);
        record.frequency = fieldSetFlags()[1] ? this.frequency : (Integer) defaultValue(fields()[1]);
        record.enabled = fieldSetFlags()[2] ? this.enabled : (Boolean) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroDeviceConfig>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroDeviceConfig>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroDeviceConfig>
    READER$ = (org.apache.avro.io.DatumReader<AvroDeviceConfig>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.ipAddress);

    out.writeInt(this.frequency);

    out.writeBoolean(this.enabled);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.ipAddress = in.readString(this.ipAddress instanceof Utf8 ? (Utf8)this.ipAddress : null);

      this.frequency = in.readInt();

      this.enabled = in.readBoolean();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.ipAddress = in.readString(this.ipAddress instanceof Utf8 ? (Utf8)this.ipAddress : null);
          break;

        case 1:
          this.frequency = in.readInt();
          break;

        case 2:
          this.enabled = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










